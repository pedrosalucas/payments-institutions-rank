import dynamic from "next/dynamic";
import Head from "next/head";
import { Text, Spacer, Table } from "@geist-ui/core";
import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import Cards from "@/components/cards/cards";
import { useEffect, useState } from "react";
import { getVisitorAddress } from "@/services/getVisitorAddress";
import { setNewAccessInfo } from "@/services/accessInfo";
import addressParser from "@/services/getAddressParsed";
import { tb_historico_acesso } from "@prisma/client";

const inter = Inter({ subsets: ["vietnamese"] });

export default function Home() {
  const [userLocation, setUserLocation] = useState<null | {
    latitude: number;
    longitude: number;
  }>(null);
  const [visitorsAmount, setVisitorsAmount] = useState<null | number>(null);
  const [userAddress, setUserAddress] = useState("");

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          fetchAddress(latitude, longitude);
        },
        (error) => console.error(error)
      );
    }
  }, []);

  const setNewAccess = async (acessObject: tb_historico_acesso) => {
    const response = await setNewAccessInfo(acessObject);
  };

  const fetchAddress = async (latitude: number, longitude: number) => {
    try {
      const visitorAddress = await getVisitorAddress(latitude, longitude);
      const data = visitorAddress.data;

      if (data?.results?.length > 0) {
        const address = data.results[0].formatted_address;
        setUserAddress(address);
        setNewAccess(
          addressParser(
            data.results[0].address_components,
            visitorAddress.access_ip,
            visitorAddress.lat,
            visitorAddress.lng
          )
        );
      }
    } catch (error) {
      console.error(error);
    }
  };

  const handleGetLocationClick = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          fetchAddress(latitude, longitude);
        },
        (error) => console.error(error)
      );
    } else {
      console.error("Geolocation não é suportado pelo seu navegador.");
    }
  };

  const MapChartWithNoSSR = dynamic(() => import("@/components/MapChart"), {
    ssr: false
  });

  return (
    <>
      <Head>
        <title>Payments Institutions Rank</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.container}>
        <Text h1>As instituições financeiras agora, mais transparentes</Text>
        <br></br>
        <Text h2 width={"60%"}>
          {" "}
          Tenha uma visão abrangente do ranking de instituições financeiras com
          base em diversos fatores. Informações valiosas sobre a reputação e o
          desempenho das instituições financeiras, permite que você tome
          decisões informadas ao escolher um parceiro financeiro.
        </Text>
      </div>

      <Spacer h={3} />
      <Cards />
      <Spacer h={3} />
      <Table></Table>

      <MapChartWithNoSSR/>
    </>
  );
}
