import Head from "next/head";
import { Text, Spacer, Table, Button } from "@geist-ui/core";
import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import Cards from "@/components/cards/cards";
import { useCallback, useEffect, useState } from "react";
import { getVisitorAddress } from "@/services/getVisitorAddress";
import { getVisitorsCount } from "@/services/getVisitorsCount";
import { getAccessHistory, setNewAccessInfo } from "@/services/accessInfo";

const inter = Inter({ subsets: ["vietnamese"] });

export default function Home() {
  const [userLocation, setUserLocation] = useState<null | {
    latitude: number;
    longitude: number;
  }>(null);
  const [visitorsAmount, setVisitorsAmount] = useState<null | number>(null);
  const [userAddress, setUserAddress] = useState("");

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          fetchAddress(latitude, longitude);
        },
        (error) => console.error(error)
      );
    }
    //teste(); //! ARRUMAR UMA ALTERNATIVA MELHOR!
    visitorsCount();
  }, []);

  /* const teste = async () => { // ! ARRUMAR UMA ALTERNATIVA MELHOR!
    const data = {
      ip_acesso: "teste acesso",
      nm_cidade: "teste cidade",
      nm_estado: "teste estado",
      nm_pais: "teste pais",
      cont_acessos: 1,
    } as tb_historico_acesso;
    console.log(await setNewAccessInfo(data));
  }; */

  const fetchAddress = async (latitude: number, longitude: number) => {
    try {
      const data = await getVisitorAddress(latitude, longitude);
      if (data?.results?.length > 0) {
        const address = data.results[0].formatted_address;
        setUserAddress(address);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const visitorsCount = async () => {
    const visitorsAmount: { id: string; value: number } =
      await getVisitorsCount();
    setVisitorsAmount(visitorsAmount.value);
  };

  const handleGetLocationClick = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          fetchAddress(latitude, longitude);
          teste();
        },
        (error) => console.error(error)
      );
    } else {
      console.error("Geolocation não é suportado pelo seu navegador.");
    }
  };

  return (
    <>
      <Head>
        <title>Payments Institutions Rank</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.container}>
        <Text h1>As instituições financeiras agora, mais transparentes</Text>
        <br></br>
        <Text h2 width={"60%"}>
          {" "}
          Tenha uma visão abrangente do ranking de instituições financeiras com
          base em diversos fatores. Informações valiosas sobre a reputação e o
          desempenho das instituições financeiras, permite que você tome
          decisões informadas ao escolher um parceiro financeiro.
        </Text>
      </div>

      <Spacer h={3} />
      <Cards />
      <Spacer h={3} />
      <Table></Table>

      <Text h2>
        Quantidade de Acessos: {visitorsAmount ? visitorsAmount : ""}
      </Text>

      {userAddress ? (
        <div>
          <Text h3>Seu endereço:</Text>
          <Text>{userAddress}</Text>
        </div>
      ) : (
        <Button onClick={handleGetLocationClick}>Obter Localização</Button>
      )}
    </>
  );
}
